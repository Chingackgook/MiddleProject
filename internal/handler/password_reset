package handler

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"math/rand"
	"middleproject/scripts"
	"net/http"
	"time"
)

// 添加一个全局变量来存储测试用的验证码
var testVerificationCodes = make(map[string]string) //test

// SendPasswordResetEmail 发送密码重置邮件
func SendPasswordResetEmail(c *gin.Context) {
	var req struct {
		Email string `json:"email" binding:"required"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request data"})
		return
	}

	// 生成验证码
	code := generateVerificationCode()

	// 存储验证码到全局变量
	testVerificationCodes[req.Email] = code //test

	// 构建邮件内容
	subject := "Password Reset"
	body := fmt.Sprintf("Your password reset code is: %s", code)

	// 发送邮件
	result := scripts.SendEmail(req.Email, subject, body)
	if result != "成功" {
		c.JSON(http.StatusInternalServerError, gin.H{"error": result})
		return
	}

	// 存储验证码到数据库（需要实现！！！）
	// repository.SaveVerificationCode(req.Email, code)

	// 响应请求
	c.JSON(http.StatusOK, gin.H{"message": "Password reset email sent"})
}

// VerifyResetCode 验证用户提供的验证码
func VerifyResetCode(c *gin.Context) {
	var req struct {
		Email string `json:"email" binding:"required"`
		Code  string `json:"code" binding:"required"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request data"})
		return
	}

	//// 验证验证码
	//if !repository.VerifyCode(req.Email, req.Code) {
	//	c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid verification code"})
	//	return
	//}

	// 验证验证码
	storedCode, exists := testVerificationCodes[req.Email]
	if !exists || storedCode != req.Code {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid verification code"})
		return
	}

	// 响应请求
	c.JSON(http.StatusOK, gin.H{"message": "Verification code is correct"})
}

// 生成验证码
const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
const (
	letterIdxBits = 6                    // 6 bits to represent a letter index
	letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
	letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits
)

func generateVerificationCode() string {
	src := rand.NewSource(time.Now().UnixNano())
	b := make([]byte, 6) // 生成6位验证码
	// 使用一个简单的随机数生成器生成验证码
	for i, cache, remain := len(b)-1, src.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = src.Int63(), letterIdxMax
		}
		if idx := int(cache & letterIdxMask); idx < len(letterBytes) {
			b[i] = letterBytes[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}
	return string(b)
}


//一些其他的修改：在cmd/main.go中注册路由
// 注册密码重置邮件发送路由
//	r.POST("/api/password-reset/mail", handler.SendPasswordResetEmail)

// 注册密码重置验证码验证路由
//	r.POST("/api/password-reset/verify", handler.VerifyResetCode)
